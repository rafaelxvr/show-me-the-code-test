{"ast":null,"code":"/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n *\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\n\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n  queryString += String.fromCharCode(keyCode);\n  setTimeout(function () {\n    queryString = '';\n  }, 1000);\n  var index;\n  queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n\n  if (prevElementId === elementId && prevString === queryString) {\n    for (var i = 0; i < matches.length; i++) {\n      if (matches[i].classList.contains(activeClass)) {\n        index = i;\n        break;\n      }\n    }\n\n    index = index + 1;\n    return matches[index] ? matches[index] : matches[0];\n  } else {\n    var listItems = items;\n    var strLength = queryString.length;\n    var text = void 0;\n    var item = void 0;\n    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n    var i = selectedIndex;\n    matches = [];\n\n    do {\n      if (i === listItems.length) {\n        i = -1;\n      }\n\n      if (i === -1) {\n        index = 0;\n      } else {\n        index = i;\n      }\n\n      item = listItems[index];\n      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n\n      if (text.substr(0, strLength) === queryString) {\n        matches.push(listItems[index]);\n      }\n\n      i++;\n    } while (i !== selectedIndex);\n\n    prevString = queryString;\n    prevElementId = elementId;\n    return matches[0];\n  }\n}\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\n * @returns {Element | number} Returns the search matched items.\n */\n\nexport function Search(inputVal, items, searchType, ignoreCase) {\n  var listItems = items;\n  ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n  var itemData = {\n    item: null,\n    index: null\n  };\n\n  if (inputVal && inputVal.length) {\n    var strLength = inputVal.length;\n    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n    queryStr = escapeCharRegExp(queryStr);\n\n    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n      var item = itemsData[i];\n      var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n\n      if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr || searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr || searchType === 'Contains' && new RegExp(queryStr, \"g\").test(text)) {\n        itemData.item = item;\n        itemData.index = i;\n        return {\n          item: item,\n          index: i\n        };\n      }\n    }\n\n    return itemData;\n  }\n\n  return itemData;\n}\nexport function escapeCharRegExp(value) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport function resetIncrementalSearchValues(elementId) {\n  if (prevElementId === elementId) {\n    prevElementId = '';\n    prevString = '';\n    queryString = '';\n    matches = [];\n  }\n}","map":{"version":3,"names":["queryString","prevString","matches","activeClass","prevElementId","incrementalSearch","keyCode","items","selectedIndex","ignoreCase","elementId","String","fromCharCode","setTimeout","index","toLowerCase","i","length","classList","contains","listItems","strLength","text","item","innerText","substr","push","Search","inputVal","searchType","undefined","itemData","queryStr","toLocaleLowerCase","escapeCharRegExp","itemsData","textContent","replace","RegExp","test","value","resetIncrementalSearchValues"],"sources":["C:/Project/show-me-the-code-test/view/node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js"],"sourcesContent":["/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n *\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n    queryString += String.fromCharCode(keyCode);\n    setTimeout(function () {\n        queryString = '';\n    }, 1000);\n    var index;\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n    if (prevElementId === elementId && prevString === queryString) {\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i].classList.contains(activeClass)) {\n                index = i;\n                break;\n            }\n        }\n        index = index + 1;\n        return matches[index] ? matches[index] : matches[0];\n    }\n    else {\n        var listItems = items;\n        var strLength = queryString.length;\n        var text = void 0;\n        var item = void 0;\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n        var i = selectedIndex;\n        matches = [];\n        do {\n            if (i === listItems.length) {\n                i = -1;\n            }\n            if (i === -1) {\n                index = 0;\n            }\n            else {\n                index = i;\n            }\n            item = listItems[index];\n            text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n            if (text.substr(0, strLength) === queryString) {\n                matches.push(listItems[index]);\n            }\n            i++;\n        } while (i !== selectedIndex);\n        prevString = queryString;\n        prevElementId = elementId;\n        return matches[0];\n    }\n}\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\n * @returns {Element | number} Returns the search matched items.\n */\nexport function Search(inputVal, items, searchType, ignoreCase) {\n    var listItems = items;\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n    var itemData = { item: null, index: null };\n    if (inputVal && inputVal.length) {\n        var strLength = inputVal.length;\n        var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n        queryStr = escapeCharRegExp(queryStr);\n        for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n            var item = itemsData[i];\n            var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) || (searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr) || (searchType === 'Contains' && new RegExp(queryStr, \"g\").test(text))) {\n                itemData.item = item;\n                itemData.index = i;\n                return { item: item, index: i };\n            }\n        }\n        return itemData;\n    }\n    return itemData;\n}\nexport function escapeCharRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport function resetIncrementalSearchValues(elementId) {\n    if (prevElementId === elementId) {\n        prevElementId = '';\n        prevString = '';\n        queryString = '';\n        matches = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}